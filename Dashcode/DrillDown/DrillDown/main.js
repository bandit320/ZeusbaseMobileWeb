/*

File: main.js

Abstract: Defines JavaScript functionality for the DrillDown sample.
	      Shows how to navigate to the next view in a hierarchy of views.
		  Updates both category and product lists.
		  
Version: <1.0>

Disclaimer: IMPORTANT:  This Apple software is supplied to you by 
Apple Inc. ("Apple") in consideration of your agreement to the
following terms, and your use, installation, modification or
redistribution of this Apple software constitutes acceptance of these
terms.  If you do not agree with these terms, please do not use,
install, modify or redistribute this Apple software.

In consideration of your agreement to abide by the following terms, and
subject to these terms, Apple grants you a personal, non-exclusive
license, under Apple's copyrights in this original Apple software (the
"Apple Software"), to use, reproduce, modify and redistribute the Apple
Software, with or without modifications, in source and/or binary forms;
provided that if you redistribute the Apple Software in its entirety and
without modifications, you must retain this notice and the following
text and disclaimers in all such redistributions of the Apple Software. 
Neither the name, trademarks, service marks or logos of Apple Inc. 
may be used to endorse or promote products derived from the Apple
Software without specific prior written permission from Apple.  Except
as expressly stated in this notice, no other rights or licenses, express
or implied, are granted by Apple herein, including but not limited to
any patent rights that may be infringed by your derivative works or by
other works in which the Apple Software may be incorporated.

The Apple Software is provided by Apple on an "AS IS" basis.  APPLE
MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND
OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.

IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,
MODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED
AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),
STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

Copyright (C) 2008 Apple Inc. All Rights Reserved.

*/

/*
	Called by HTML body element's onload event when the web application is ready to start.
	This function was generated by Dashcode.
*/
function load()
{
    dashcode.setupParts();
}

/*
	Receives the selected category and returns all the products associated with it.
	Returns a list made of MacBook, MacBook Air, and MacBook Pro if users select the 
	Macs category, for example. 
*/
function selectProducts(product)
{
	if (product == "iPods"){
		return ["iPod classic", "iPod nano", "iPod shuffle", "iPod touch"];
	}
	else if (product == "Macs"){
		return ["MacBook", "MacBook Air", "MacBook Pro"];
	}
	else if (product == "Applications"){
		return ["Mac OS X", "iLife", ".Mac", "iWork", "QuickTime", "Aperture", "Final Cut Studio"];
	}
	else if (product == "Servers"){
		return ["Xserve", "Xsan", "Mac OS X Server"];
	}
	else {
	   return null;
	} 
}

/*
	Implements the dataSource methods for categoryList.  
*/
var categoryListController = {
	
	/* categoryList will display these items  */
	_rowData: ["iPods", "Macs", "Applications", "Servers"],
	
	 /* categoryListController must implement the numberOfRows and prepareRow functions */
	/*  This method is used to find out how many rows should be in the list */
	numberOfRows: function() {
		return this._rowData.length;
	},
	
	
	/* categoryList calls this method once for every row. */
	prepareRow: function(rowElement, rowIndex, templateElements) {
		/* 
		   templateElements contains references to all elements that have an id in the category template row.
		   We use the lines below to update the list with each category item in _rowData.
		*/
		if (templateElements.categoryLabel) {
			templateElements.categoryLabel.innerText = this._rowData[rowIndex];
		}

	    /* Assign an onclick handler that will cause the browser to go a page 
		   showing all products related to this category item, when clicked 
		*/
		var self = this;
        var handler = function() {
			/* Get the category item associated with this row */
			var category = self._rowData[rowIndex];
			
			/* Call productListController to show all products associated with "category" */
			productListController.setRowData(category);
			var browser = document.getElementById('browser').object;
			
			/* The Browser's goForward method is used to make the browser push down to a new level. 
			   Going back to previous levels is handled automatically. */
			browser.goForward(document.getElementById('productView'), category);
		};
        rowElement.onclick = handler;
	}
};


/*
	Implements the dataSource methods for productList.  
*/
var productListController = {

	/* Data source for the product list. We are using setRowData to fill this data source. */
	_rowData: [],
	/* Use this function to update the product list on the fly */
	setRowData: function(category) {
	    
		/* Call the selectProducts function to retrieve all products associated with a received category item */
		var productDetails = selectProducts(category);
		
		if (productDetails != null){
		    /* Update the data source with the retrieved products */
			this._rowData = productDetails;
			
			/* IMPORTANT: You must refresh the list once you are done appending data to it.
			   The list will be empty or outdated if you skip this step. */
			 document.getElementById("productList").object.reloadData(); 
		} 
	}, 
	numberOfRows: function() {
		return this._rowData.length;
	},
	
	prepareRow: function(rowElement, rowIndex, templateElements) {
		if (templateElements.productLabel) {
			templateElements.productLabel.innerText = this._rowData[rowIndex];
		}
	}
}
